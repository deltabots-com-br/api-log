openapi: 3.0.0
info:
  title: Deltabots Unified Log API (SIMPLES)
  description: API unificada para registrar e consultar logs de execuções RPA e iPaaS (n8n).
  version: "1.1.0"
servers:
  - url: http://SEU_DOMINIO_API # Substitua pelo URL real da sua API
    description: Servidor Principal
tags:
  - name: Logs
    description: Operações para registrar e consultar logs de RPA e iPaaS.
  - name: Health
    description: Verificação de status da API.
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    # --- Schemas de Erro ---
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Acesso negado
        message:
          type: string
          example: Chave de API inválida.
      required:
        - error
        - message

    # --- Schema de Entrada Unificado (Descreve ambos os casos) ---
    UnifiedLogInput:
      type: object
      description: O formato da requisição depende do valor do campo 'type'.
      properties:
        type:
          type: string
          description: Deve ser 'rpa' ou 'ipaas'. Define a coleção de destino.
          enum: [rpa, ipaas]
          example: ipaas
        # Campos Específicos para RPA:
        level:
          type: string
          description: (Somente para type=rpa) Nível do log (INFO, ERROR, etc.).
          example: ERROR
        message:
          type: object
          description: (Somente para type=rpa) O corpo detalhado do log RPA.
          additionalProperties: true
          example: { evento: Falha de Login, summary: { robo_codigo: FAT_001 } }
        # Campos Específicos para iPaaS:
        ipaas_codigo:
          type: string
          description: (Somente para type=ipaas) Identificador do fluxo iPaaS.
          example: ERPSIGO-l9Ys9nqdsHvFyWlJ
        data:
          type: object
          description: (Somente para type=ipaas) Objeto JSON completo da execução iPaaS (n8n).
          additionalProperties: true
          example: { startData: {}, Status: error, lastNode: Nó com Erro }
      required:
        - type

    # --- Schemas de Saída ---
    PostLogSuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: sucesso
        log_type_processed:
          type: string
          example: ipaas
        log_id:
          type: string
          description: O ID único do log inserido no MongoDB.
          example: 635f123abc123def456ghi78
      required:
        - status
        - log_type_processed
        - log_id

    LogListResponse:
      type: object
      properties:
        status:
          type: string
          example: sucesso
        total_resultados:
          type: integer
          example: 15
        filtros_aplicados:
          type: object
          description: Resumo dos filtros aplicados na consulta.
          additionalProperties: true
          example: { type: ipaas, ipaas_codigo: 'ERPSIGO...', data_inicio: '2025-10-20' }
        logs:
          type: array
          description: Lista dos documentos de log. A estrutura de cada log varia (RPA ou iPaaS) conforme o 'type' solicitado.
          items:
            type: object
            additionalProperties: true
      required:
        - status
        - total_resultados
        - filtros_aplicados
        - logs

    HealthStatus:
      type: object
      properties:
        api_status:
          type: string
          example: operacional
        mongodb_status:
          type: string
          enum: [conectado, desconectado]
          example: conectado
      required:
        - api_status
        - mongodb_status

security:
  - ApiKeyAuth: []

paths:
  /:
    get:
      tags:
        - Health
      summary: Verifica a saúde da API e a conexão com o MongoDB.
      description: Retorna o status operacional da API.
      security: []
      responses:
        '200':
          description: API está operacional.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /logs:
    post:
      tags:
        - Logs
      summary: Registra um log de RPA ou iPaaS na coleção apropriada.
      description: O tipo de log é definido pelo campo 'type' no corpo da requisição.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: Objeto JSON contendo o log e o seu tipo.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedLogInput'
      responses:
        '201':
          description: Log registrado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostLogSuccessResponse'
        '400':
          description: Requisição inválida (campos de tipo ausentes ou inválidos).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'

    get:
      tags:
        - Logs
      summary: Consulta logs por tipo e filtros de data/código.
      description: Busca e retorna os logs (RPA ou iPaaS) mais recentes, limitados a 100 resultados.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: type
          in: query
          required: true
          description: Deve ser 'rpa' ou 'ipaas'.
          schema:
            type: string
            enum: [rpa, ipaas]
            example: rpa
        - name: robo_codigo
          in: query
          required: false
          description: (Usado com type=rpa) Filtra logs pelo código do robô.
          schema:
            type: string
            example: FATURAMENTO_001
        - name: ipaas_codigo
          in: query
          required: false
          description: (Usado com type=ipaas) Filtra logs pelo código do fluxo iPaaS.
          schema:
            type: string
            example: ERPSIGO-l9Ys9nqdsHvFyWlJ
        - name: data_inicio
          in: query
          required: false
          description: Data/hora inicial (YYYY-MM-DD ou YYYY-MM-DDTHH:MM:SSZ).
          schema:
            type: string
            format: date-time
            example: 2025-10-26T10:00:00Z
        - name: data_fim
          in: query
          required: false
          description: Data/hora final.
          schema:
            type: string
            format: date-time
            example: 2025-10-26
      responses:
        '200':
          description: Lista de logs encontrada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogListResponse'
        '400':
          description: Requisição inválida (type ausente ou formato de data errado).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'

  # --- Respostas Padrão Reutilizáveis (para simplificar a rota /logs) ---
  responses:
    UnauthorizedError:
      description: Acesso negado. Header 'X-API-Key' ausente.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenError:
      description: Acesso negado. Chave de API inválida.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServiceUnavailableError:
      description: Serviço indisponível (falha na conexão com o banco de dados).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
