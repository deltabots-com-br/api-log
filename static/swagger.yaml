# [YAML code block from the previous response - included for reference but prioritize validation]
openapi: 3.0.0
info:
  title: Deltabots Unified Log API
  description: API unificada para registrar e consultar logs de execuções RPA e iPaaS (n8n).
  version: "1.1.0"
servers:
  - url: http://SEU_DOMINIO_API # Substitua pelo URL real da sua API
    description: Servidor Principal
tags:
  - name: Logs
    description: Operações para registrar e consultar logs de RPA e iPaaS.
  - name: Health
    description: Verificação de status da API.
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    # --- Schemas de Erro ---
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Descrição curta do erro.
          example: Acesso negado
        message:
          type: string
          description: Mensagem detalhada sobre o erro.
          example: Chave de API inválida.
      required:
        - error
        - message

    # --- Schemas de Entrada para POST /logs ---
    RpaLogInputBase:
      type: object
      properties:
        level:
          type: string
          description: Nível do log (ex: INFO, ERROR, WARNING).
          example: INFO
        message:
          type: object
          description: O conteúdo detalhado do log RPA. A estrutura interna pode variar.
          additionalProperties: true
          example:
            evento: InicioExecucao
            detalhes: Robô iniciando processamento.
            summary:
              robo_codigo: FATURAMENTO_001
              execucao_id: exec_abc123
      required:
        - level
        - message

    IpaasLogInputBase:
      type: object
      properties:
        ipaas_codigo:
          type: string
          description: Identificador único do fluxo/workflow iPaaS.
          example: ERPSIGO-l9Ys9nqdsHvFyWlJ
        data:
          type: object
          description: Objeto contendo os detalhes completos da execução iPaaS (estrutura pode variar dependendo da plataforma, ex: n8n).
          additionalProperties: true
          example:
            startData: {}
            resultData: { runData: { Webhook: [] } }
            Status: success
      required:
        - ipaas_codigo
        - data

    UnifiedLogInput:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: Indica o tipo de log que está sendo enviado. Determina os outros campos obrigatórios.
          enum: [rpa, ipaas]
      discriminator:
        propertyName: type
        mapping:
          rpa: '#/components/schemas/RpaLogInput'
          ipaas: '#/components/schemas/IpaasLogInput'
      oneOf:
        - $ref: '#/components/schemas/RpaLogInput'
        - $ref: '#/components/schemas/IpaasLogInput'

    RpaLogInput:
      allOf:
        - type: object
          properties:
            type:
              type: string
              description: Tipo de log, deve ser 'rpa'.
              enum: [rpa]
          required: [type]
        - $ref: '#/components/schemas/RpaLogInputBase'

    IpaasLogInput:
      allOf:
        - type: object
          properties:
            type:
              type: string
              description: Tipo de log, deve ser 'ipaas'.
              enum: [ipaas]
          required: [type]
        - $ref: '#/components/schemas/IpaasLogInputBase'

    # --- Schemas de Saída ---
    PostLogSuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: sucesso
        log_type_processed:
          type: string
          description: O tipo de log que foi processado ('rpa' ou 'ipaas').
          example: rpa
        log_id:
          type: string
          description: O ID único do log inserido no banco de dados MongoDB.
          example: 635f123abc123def456ghi78
      required:
        - status
        - log_type_processed
        - log_id

    LogListResponse:
      type: object
      properties:
        status:
          type: string
          example: sucesso
        total_resultados:
          type: integer
          description: Número de logs retornados na consulta atual (limitado a 100).
          example: 15
        filtros_aplicados:
          type: object
          description: Um resumo dos filtros que foram aplicados nesta busca.
          properties:
            type:
              type: string
              enum: [rpa, ipaas]
            robo_codigo:
              type: string
              description: Presente se type=rpa e o filtro foi aplicado.
            ipaas_codigo:
              type: string
              description: Presente se type=ipaas e o filtro foi aplicado.
            data_inicio:
              type: string
              format: date-time # Ou date
            data_fim:
              type: string
              format: date-time # Ou date
          required:
            - type
        logs:
          type: array
          description: Lista dos documentos de log encontrados. A estrutura de cada item depende do 'type' solicitado ('rpa' ou 'ipaas').
          items:
            type: object
            description: "Se type=rpa, contém _id, timestamp_utc, source_ip, level, message. Se type=ipaas, contém _id, timestamp_utc, source_ip, ipaas_codigo, execution_details."
            additionalProperties: true
      required:
        - status
        - total_resultados
        - filtros_aplicados
        - logs

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          example: API de Logs Unificada está operacional
        mongodb_status:
          type: string
          enum: [conectado, desconectado]
          example: conectado
      required:
        - status
        - mongodb_status

security:
  - ApiKeyAuth: []

paths:
  /logs:
    post:
      tags:
        - Logs
      summary: Registra um novo log (RPA ou iPaaS)
      description: Recebe um log no formato JSON. O campo 'type' determina se é um log de RPA ou iPaaS e quais outros campos são necessários.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: Objeto JSON contendo o log a ser registrado.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedLogInput'
      responses:
        '201':
          description: Log registrado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostLogSuccessResponse'
        '400':
          description: Requisição inválida (JSON malformado, campos obrigatórios ausentes para o 'type' especificado, 'type' inválido).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Acesso negado (Header 'X-API-Key' ausente).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acesso negado (Chave de API 'X-API-Key' inválida).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erro interno do servidor (ex: falha ao escrever no banco de dados).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Serviço indisponível (falha na conexão com o banco de dados).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Logs
      summary: Consulta logs registrados (RPA ou iPaaS)
      description: Busca logs com base no 'type' e outros filtros opcionais. Retorna os 100 logs mais recentes que correspondem aos critérios, ordenados por timestamp decrescente.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: type
          in: query
          required: true
          description: Especifica o tipo de log a ser consultado.
          schema:
            type: string
            enum: [rpa, ipaas]
            example: rpa
        - name: robo_codigo
          in: query
          required: false
          description: (Opcional, usar com type=rpa) Filtra logs pelo código do robô (busca em 'message.summary.robo_codigo').
          schema:
            type: string
            example: FATURAMENTO_001
        - name: ipaas_codigo
          in: query
          required: false
          description: (Opcional, usar com type=ipaas) Filtra logs pelo código do fluxo iPaaS.
          schema:
            type: string
            example: ERPSIGO-l9Ys9nqdsHvFyWlJ
        - name: data_inicio
          in: query
          required: false
          description: (Opcional) Data/hora inicial (inclusive) para filtrar os logs. Formato YYYY-MM-DD ou YYYY-MM-DDTHH:MM:SS[Z] (ISO 8601). Se Z não for fornecido, assume-se UTC. Se a hora não for fornecida, considera o início do dia (00:00:00 UTC).
          schema:
            type: string
            format: date-time
            example: 2025-10-26T10:00:00Z
        - name: data_fim
          in: query
          required: false
          description: (Opcional) Data/hora final (inclusive) para filtrar os logs. Formato YYYY-MM-DD ou YYYY-MM-DDTHH:MM:SS[Z] (ISO 8601). Se Z não for fornecido, assume-se UTC. Se a hora não for fornecida, considera o fim do dia (23:59:59.999 UTC).
          schema:
            type: string
            format: date-time
            example: 2025-10-26
      responses:
        '200':
          description: Lista de logs encontrada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogListResponse'
        '400':
          description: Requisição inválida (parâmetro 'type' ausente ou inválido, formato de data inválido).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Acesso negado (Header 'X-API-Key' ausente).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acesso negado (Chave de API 'X-API-Key' inválida).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erro interno do servidor (ex: falha ao consultar o banco de dados).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Serviço indisponível (falha na conexão com o banco de dados).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /:
    get:
      tags:
        - Health
      summary: Verifica a saúde da API
      description: Retorna o status operacional da API e da conexão com o MongoDB. Não requer autenticação.
      security: []
      responses:
        '200':
          description: API está operacional.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
